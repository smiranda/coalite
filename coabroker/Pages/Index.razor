@page "/"
@using System.IO
@using System.Collections
@using Ketchup.Pizza.Models
@using Newtonsoft.Json.Linq
@using DotForth
@inject HttpClient Http
@inject IJSRuntime JS;
<style>
/*textarea {
  width: 100%;
  padding: 0px;
  overflow-y: hidden;
  box-sizing: border-box;
  border: 0px;
  border-radius: 0px;
  background-color: #2b1900;
  font-size: 42px;
  color: #ff9400;
  font-family: 'Courier New', Courier, monospace;
  resize: none;
}
textarea:focus {
    outline: none !important;
    border: 0px;
    box-shadow: 0 0 0px #000000;
  }
  .cursor {
    position: relative;
}
.cursor i {
    position: absolute;
    width: 1px;
    height: 80%;
    background-color: gray;
    left: 5px;
    top: 10%;
    animation-name: blink;
    animation-duration: 800ms;
    animation-iteration-count: infinite;
    opacity: 1;
}

.cursor input:focus + i {
    display: none;
}*/


</style>
<!--<div id="terminal2"class="cursor"><input/></div>-->
<!--<div id="eventarea"><textarea></textarea></div>-->
<div id="terminal" type="password"></div>

@code {
    public static Forth Forth { get; set; } = new Forth();

    protected async Task<string> GetKey()
    {
        return await JS.InvokeAsync<string>("generateKey");
    }

    protected override void OnInitialized()
    {
        Forth.LoadWord("key", new CompiledWord(async (Forth forth, TextWriter output) =>
        {
            var key = await GetKey();
            // Console.WriteLine(key);
            var keyData = JToken.Parse(key);
            var privateKeyData = keyData["privateKey"].Value<string>();
            var publicKeyData = keyData["publicKey"].Value<string>();
            forth.Stack.Push(new StackEntry(privateKeyData));
            forth.Stack.Push(new StackEntry(publicKeyData));
        }));

        Forth.LoadWord("get", new CompiledWord(async (Forth forth, TextWriter output) =>
        {
            var userId = forth.Stack.Pop().Token;
            var publicKeyData = forth.Stack.Pop().Token;
            var privateKeyData = forth.Stack.Pop().Token;
            var coalite = await GetCoalite(userId, publicKeyData, privateKeyData);
            forth.Stack.Push(new StackEntry(coalite));
        }));
    }

    [JSInvokable]
    public static async Task<string> RunTerminalCommand(string command)
    {
        var twr = new StringWriter();
        await Forth.Run(command, twr);
        var result = twr.ToString();
        /* Console.WriteLine("$ " + command);
        Console.WriteLine("> " + result);*/
        return await Task.Run(() => { return result; });
    }

    private async Task<string> GetCoalite(string inputId, string inputPubK, string inputPrivK)
    {
        await JS.InvokeVoidAsync("bootFn", "boot");

        //var response = await Http.GetStringAsync("https://coaliter.ketchup.pizza/coalite");
        var response = await Http.GetStringAsync("http://localhost:5000/coalite");
        var coaliteResource = JToken.Parse(response).ToObject<CoaliteResource>();

        var action = CoaliteAction.CLAIM;
        var actionPayload = "";
        var signerId = inputId;
        var signerPublicKey = inputPubK;
        var request = new CoaliteActionRequest(
        coaliteResource,
        signerPublicKey,
        action,
        actionPayload,
        signerId);
        request.SignerPublicKeyFormat = "X.509";

        // Create action signature
        var signature = new CoaliteSignature(action,
        actionPayload,
        signerPublicKey,
        signerId);

        var presignPayload = signature.GetPresignPayload();
        var dataToSign = request.Coalite.GetAsSignablePayload(presignPayload);

        var b64Blob = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(dataToSign));
        request.ActionSignature = await JS.InvokeAsync<string>("signData", inputPrivK, b64Blob);

        // Create request signature
        dataToSign = request.GetAsSignablePayload();
        b64Blob = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(dataToSign));
        request.Signature = await JS.InvokeAsync<string>("signData", inputPrivK, b64Blob);

        //var result = await Http.PostAsJsonAsync("https://coaliter.ketchup.pizza/coalite/action", request);
        var result = await Http.PostAsJsonAsync("http://localhost:5000/coalite/action", request);
        result.EnsureSuccessStatusCode();
        var finalResult = await result.Content.ReadAsStringAsync();
        Console.WriteLine(finalResult);
        return finalResult;
    }
}
